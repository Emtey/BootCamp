<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Foundation</name>
    </assembly>
    <members>
        <member name="T:Foundation.IContactInfo">
            <summary>
            IContactInfo interface.  Inherits from ICompanyContact, IAddress and ICountryPhone
            </summary>
        </member>
        <member name="T:Foundation.ICompanyContact">
            <summary>
            ICompanyContact Interface
            All properties must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICompanyContact.ID">
            <summary>
            Interface for ID property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICompanyContact.CompanyName">
            <summary>
            Interface for CompanyName property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICompanyContact.ContactName">
            <summary>
            Interface for ContactName property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICompanyContact.ContactTitle">
            <summary>
            Interface for ContactTitle property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="T:Foundation.IAddress">
            <summary>
            IAddress Interface
            All properties must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.IAddress.Address">
            <summary>
            Interface for Address property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.IAddress.City">
            <summary>
            Interface for City property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.IAddress.Region">
            <summary>
            Interface for Region property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.IAddress.PostalCode">
            <summary>
            Interface for PostalCode property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="T:Foundation.ICountryPhone">
            <summary>
            ICountryPhone Interface
            All properties must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICountryPhone.Country">
            <summary>
            Interface for Country property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICountryPhone.Phone">
            <summary>
            Interface for Phone property
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="P:Foundation.ICountryPhone.Fax">
            <summary>
            Interface for Fax propery
            Must be implemented by inheriting class
            </summary>
        </member>
        <member name="T:Foundation.Contact">
            <summary>
            Base Class for Contact information.
            Inherits from IContactInfo, which in turn inherits from
            IAddress, IcompanyContact, and ICountryPhone.
            This class must implement all properties and methods from the 
            afore mentioned interfaces.
            </summary>
        </member>
        <member name="F:Foundation.Contact._iD">
            <summary>
            Stores the ID data as an int.
            </summary>
        </member>
        <member name="F:Foundation.Contact._companyName">
            <summary>
            Stores the CompanyName data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._contactName">
            <summary>
            Stores the ContactName data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._contactTitle">
            <summary>
            Stores the ContactTitle data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._address">
            <summary>
            Stores the Address data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._city">
            <summary>
            Stores the City data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._region">
            <summary>
            Stores the Region data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._postalCode">
            <summary>
            Stores the PostalCode data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._country">
            <summary>
            Stores the Country data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._phone">
            <summary>
            Stores the Phone data as a string.
            </summary>
        </member>
        <member name="F:Foundation.Contact._fax">
            <summary>
            Stores the Fax data as a string.
            </summary>
        </member>
        <member name="M:Foundation.Contact.#ctor">
            <summary>
            Default Constructor for the Contact Class
            </summary>
        </member>
        <member name="M:Foundation.Contact.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Non-Default Constructor for the Contact Class.
            </summary>
            <param name="ID">ID of Contact(int)</param>
            <param name="CompanyName">CompanyName of contact(string)</param>
            <param name="ContactName">ContactName of contact(string)</param>
            <param name="ContactTitle">ContactTitle of contact(string)</param>
            <param name="Address">Address of contact(string)</param>
            <param name="City">City of contact (string)</param>
            <param name="Region">Region of contact (string)</param>
            <param name="PostalCode">PostalCode of contact (string)</param>
            <param name="Country">Country of contact (string)</param>
            <param name="Phone">Phone number of contact (string)</param>
            <param name="Fax">Fax number of contact (string)</param>
        </member>
        <member name="M:Foundation.Contact.ContactInfo">
            <summary>
            Abstract method ContactInfo.  Another class can provide the 
            implementation for this if it wants to.
            </summary>
            <returns>Returns StringBuilder object</returns>
        </member>
        <member name="P:Foundation.Contact.ID">
            <summary>
            Property for ID.  Inherited from ICompanyContact.
            Throws ArguementsOutOfRangeException when the ID is not 1 to 99,999.
            </summary>
        </member>
        <member name="P:Foundation.Contact.CompanyName">
            <summary>
            Property for CompanyName.  Inhertied from ICompanyContact.
            Throws ArguementOutOfRangeException through the throwException method
            when CompanyName is not 1 to 40 characters long.
            </summary>
        </member>
        <member name="P:Foundation.Contact.ContactName">
            <summary>
            Property for ContactName.  Inhertied from ICompanyContact.
            Throws ArguementOutOfRangeException through the throwException method 
            when ContactName is not 1 to 30 characters long.
            </summary>
        </member>
        <member name="P:Foundation.Contact.ContactTitle">
            <summary>
            Property for ContactTitle.  Inhertied from ICompanyContact.
            Throws ArguementOutOfRangeException through the throwException method
            when ContactTitle is not 1 to 30 characters long.  
            </summary>
        </member>
        <member name="P:Foundation.Contact.Address">
            <summary>
            Property for Address.  Inhertied from IAddress.
            Throws ArguementOutOfRangeException through the throwException method
            when Address is not 1 to 60 characters long. 
            </summary>
        </member>
        <member name="P:Foundation.Contact.City">
            <summary>
            Property for City.  Inhertied from IAddress.
            Throws ArguementOutOfRangeException through the throwException method 
            when City is not 1 to 15 characters long. 
            </summary>
        </member>
        <member name="P:Foundation.Contact.Region">
            <summary>
            Property for Region.  Inhertied from IAddress.
            Throws ArguementOutOfRangeException through the throwException method 
            when Region is not 1 to 15 characters long. 
            </summary>
        </member>
        <member name="P:Foundation.Contact.PostalCode">
            <summary>
            Property for PostalCode. Inhertied from IAddress.
            Throws ArguementOutOfRangeException through the throwException method 
            when PostalCode is not 1 to 10 characters long.  
            </summary>
        </member>
        <member name="P:Foundation.Contact.Country">
            <summary>
            Property for Country. Inhertied from ICountryPhone.
            Throws ArguementOutOfRangeException through the throwException method 
            when Country is not 1 to 15 characters long.  
            </summary>
        </member>
        <member name="P:Foundation.Contact.Phone">
            <summary>
            Property for Phone.  Inhertied from ICountryPhone.
            Throws ArguementOutOfRangeException through the throwException method 
            when Phone is not 1 to 15 characters long.  
            </summary>
        </member>
        <member name="P:Foundation.Contact.Fax">
            <summary>
            Property for Fax.  Inhertied from ICountryPhone.
            Throws ArguementOutOfRangeException through the throwException method 
            when Fax is not 1 to 15 characters long.  
            </summary>
        </member>
        <member name="T:Foundation.ICustomCollection">
            <summary>
            ICustomCollection interface.  
            All properties and methods must be implemented by the inheriting class
            </summary>
        </member>
        <member name="M:Foundation.ICustomCollection.Add(System.Object)">
            <summary>
            Add Method - Adds objects together returning their sum.
            Must be implemented by inheriting class.
            </summary>
            <param name="value">value to add.</param>
            <returns>Integer which is the sum.</returns>
        </member>
        <member name="M:Foundation.ICustomCollection.Clear">
            <summary>
            Clear Method - Clears a collection.
            Must be implemented bu inheriting class.
            </summary>
        </member>
        <member name="M:Foundation.ICustomCollection.Contains(System.Object)">
            <summary>
            Contains Method - Checks to see if a collection contains the object
            that was passed to it.  
            Must be implemented by inheriting class.
            </summary>
            <param name="value">Object that is being searched for in a collection</param>
            <returns>True if object is present, False if not present</returns>
        </member>
        <member name="M:Foundation.ICustomCollection.IndexOf(System.Object)">
            <summary>
            IndexOf Method - Gets the index of an object in a collection.
            Must be implemented by inheriting class.
            </summary>
            <param name="value">Object in a collection that you want the index for.</param>
            <returns>Integer that represents the index location.</returns>
        </member>
        <member name="M:Foundation.ICustomCollection.Insert(System.Int32,System.Object)">
            <summary>
            Insert method - Inserts an object into a collection at a specified location.
            Must be implemented by inheriting class.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Foundation.ICustomCollection.Remove(System.Object)">
            <summary>
            remove method - Removes an object from a collection.
            Must be implemented by inheriting class.
            </summary>
            <param name="value">Object that is to be removed from the collection</param>
        </member>
        <member name="M:Foundation.ICustomCollection.RemoveAt(System.Int32)">
            <summary>
            RemoveAt method - Removes an object at a given index from the collection.
            Must be implemented by inheriting class.
            </summary>
            <param name="index">The location of the object to remove in the collection</param>
        </member>
        <member name="M:Foundation.ICustomCollection.CopyTo(System.Object[])">
            <summary>
            CopyTo method - Copies the entire collection to another specified collection.
            Must be implemented by inheriting class.
            </summary>
            <param name="objArray">Name of the collection (object array) to which the collection is to be copied</param>
        </member>
        <member name="M:Foundation.ICustomCollection.Sort">
            <summary>
            Sort method - Sorts a collection into ascending order.
            Must be implemented by inheriting class.
            </summary>
        </member>
        <member name="M:Foundation.ICustomCollection.Sort(System.Collections.IComparer)">
            <summary>
            overridden Sort method - Sorts the collection based on the IComparer object.
            </summary>
            <param name="comparer">IComparer object that specifies sorting order.</param>
        </member>
        <member name="P:Foundation.ICustomCollection.Count">
            <summary>
            Interface for the Count property of a Collection.
            Returns the amount of objects in a collection.
            </summary>
        </member>
        <member name="P:Foundation.ICustomCollection.Item(System.Int32)">
            <summary>
            Interface for the Indexer of the current object.
            Must be implemented by inheriting class.
            </summary>
            <param name="index">The index of the current object.</param>
            <returns>Index</returns>
        </member>
    </members>
</doc>
